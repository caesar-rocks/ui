package ui

type ButtonVariant int

const (
	ButtonVariantPrimary ButtonVariant = iota
	ButtonVariantSecondary
	ButtonVariantDanger
)

const commonButtonClass = "px-4 py-2 gap-2 inline-flex items-center justify-center rounded-md text-sm font-medium shadow-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed"

var buttonVariantClass = map[ButtonVariant]string{
	ButtonVariantPrimary:   "bg-black text-white hover:bg-zinc-700",
	ButtonVariantSecondary: "border border-zinc-300 text-black hover:bg-zinc-100",
	ButtonVariantDanger:    "bg-red-600 text-zinc-100 hover:bg-red-500",
}

type ButtonProps struct {
	Class       string
	Icon        string
	Variant     ButtonVariant
	HxIndicator string
	HxTarget    string
	HxSwap      string
	HxTrigger   string
	HxGet       string
	HxPatch     string
	HxPost      string
	HxPut       string
	HxDelete    string
	Type        string
	Disabled    bool
	Extra       map[string]any
}

templ Button(props ButtonProps) {
	<button
		class={ commonButtonClass + " " + props.Class + " " + buttonVariantClass[props.Variant] }
		if props.HxIndicator != "" {
			hx-indicator={ "#" + props.HxIndicator }
		}
		if props.Disabled {
			disabled
		}
		if props.HxTarget != "" {
			hx-target={ props.HxTarget }
		}
		if props.HxSwap != "" {
			hx-swap={ props.HxSwap }
		}
		if props.HxTrigger != "" {
			hx-trigger={ props.HxTrigger }
		}
		if props.HxGet != "" {
			hx-get={ props.HxGet }
		}
		if props.HxPatch != "" {
			hx-patch={ props.HxPatch }
		}
		if props.HxPost != "" {
			hx-post={ props.HxPost }
		}
		if props.HxPut != "" {
			hx-put={ props.HxPut }
		}
		if props.HxDelete != "" {
			hx-delete={ props.HxDelete }
		}
		type={ props.Type }
		{ props.Extra... }
	>
		<i
			class="htmx-indicator fa-solid fa-spinner w-3 h-3 animate-spin"
			if props.HxIndicator != "" {
				id={ props.HxIndicator }
			}
		></i>
		if props.Icon != "" {
			<i class={ "btn-icon fa-solid w-3 h-3 " + props.Icon }></i>
		}
		<span>
			{ children... }
		</span>
	</button>
}
